@startuml
participant "Resource operator" as RO
participant "Vehicle operator" as op
participant "Resource Information Service (RIS)" as RIS
participant "Discovery & Synchronization Service (DSS)" as DSS
participant "Demand Capacity Balancing (DCB)" as DCB
participant "DCB2" as DCB2
participant "Operational Intent Management (OIM)" as OIM
participant "Conformance Monitoring (CM)" as CM
participant "CM2" as CM2

==DCB subscribe to resources==
DCB -> DSS: PUT /dss/v1/subscriptions/{subscriptionid}
note over DSS
    Subscription request includes
    indication of which data triggers
    notification when changed: 
    operations, constraints, and resources. 
end note
DCB <-- DSS: operational intent references & resource references

note over DCB
No resources or operational 
intents exist currently. 
Nothing to do yet. 
end note

==Make resources discoverable==
note over RO
Resource is originally defined here.
end note 
RO -> RIS: Submit initial resource definition, capacity, and status
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}
note over DSS
Resource reference creation
creates an implicit self-subscription
for any changes needed to the resource
due to OIM flight intents.
end note
DSS --> RIS: subscribers, resource-reference including subscription id & ovn
loop For each resource subscriber
    DCB <-- RIS: POST /dcb/v1/resource_details\n(includes resource reference, physical definition & default capacity, and current status)
end
note over DCB
Assumption: ResourceDetails contains definition, status and capacity. 
end note

== Resource capacity, status or definition is updated ==
RO -> RIS: Update a future resource capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=CAPACITY)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource_details/{entityid}/capacities\n(includes reference-reference and future capacities)
end

RO -> RIS: Update resource status or current capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=STATUS)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource_details/{entityid}/status\n(includes reference-reference and current resource status)
end

RO -> RIS: Update resource definition or default capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=DEFINITION)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource-details/{resource-id}/definition\n(includes reference-reference, physical definition & default capacity)
end

== OIM receives request from operator and submits an operation to the DSS in proposed state == 
op -> OIM: Op Request
OIM -> DSS: PUT /dss/v1/operational_intent_references/{entityId}  (Proposed state)
note over DSS
Does not check any OVNs here. All operation intents accepted.
end note
OIM <-- DSS: subscribers to notify
loop For all subscribers
    OIM -> DCB: POST /dcb/v1/operational_intents (includes OVN)
    DCB -> DCB: Adjust demand/capacity values
end

== A new subscriber joins == 
DCB2 -> DSS: PUT /dss/v1/subscriptions/{subscriptionid}
DCB2 <-- DSS: operational intent references & resource references
loop For each resource reference received
    note over DCB2
    Get all resource details.
    end note
    DCB2 -> RIS: GET /ris/v1/resource_details/{entityid}\n(includes resource reference, physical definition & default capacity, and current status)
    DCB2 <-- RIS: resource details (includes resource reference, physical definition & default capacity, and current status)
end
loop For each operation reference received
    note over DCB2
    Get all operation details.
    end note
    DCB2 -> OIM: GET /oim/v1/operation_intents/{operation-id} (includes OVN)
    DCB2 <-- OIM: operation details (everything)
end

== OIM does DCB check and transitions operation to Accepted state (OVNs required) ==
OIM -> DCB: POST /dcb/v1/imbalance/intent
OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

alt If imbalance detected
    note over OIM: Do not update the operation
else If no imbalance detected
    OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Accepted)
    DSS -> DSS: Confirms OVNs are correct
    OIM <-- DSS: operation intent reference with subscribers
    loop For all subscribers
        OIM -> DCB2: POST /dcb/v1/operational_intents
        OIM -> DCB: POST /dcb/v1/operational_intents
    end
end

==Conformance Monitoring==
CM -> DSS: PUT /dss/v1/subscriptions/
CM <-- DSS: resource references
CM -> RIS: GET /ris/v1/resource-details/{resource-id} (includes OVN)
CM <-- RIS: resource details (everything)
OIM -> CM: POST /cm/v1/operational_intents

op -> CM: Vehicle position
alt If vehicle position for operation in Accepted state
    CM -> OIM: POST /oim/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
    note over OIM: OIM does a DCB check
    OIM -> DCB: POST /dcb/v1/imbalance/intent
    OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

    alt If imbalance detected
        note over OIM: Do not update the operation
    else If no imbalance detected
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
        DSS -> DSS: Confirms OVNs are correct
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
    end 
else If vehicle position for operation in Activated state
    CM -> CM: Conformance monitoring
    alt If operation in conformance
        note over CM: Do nothing
    else If operation not in conformance
        CM -> OIM: POST /oim/v1/operation_intent_references/{entityId}/{ovn}\n(state = Nonconforming)
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Nonconforming)
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
    end
end

==Conformance monitoring when resource capacity changes==
RO -> RIS: Update a future resource capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=CAPACITY)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource_details/{entityid}/capacities\n(includes reference-reference and future capacities)
    DCB -> DCB: Adjust demand/capacity values
    alt If imbalance detected
        DCB -> OIM: POST /oim/v1/imbalance
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
    else If no imbalance detected
        note over DCB: do nothing
    end
    RIS -> DCB2: PUT /dcb/v1/resource_details/{entityid}/capacities\n(includes reference-reference and future capacities)
    RIS -> CM: PUT /cm/v1/resource_details/{entityid}/capacities\n(includes reference-reference and future capacities)
end
'note over CM: DCB check
'CM -> DCB: POST /dcb/v1/imbalance/intent
'CM <-- DCB: Yes/no, OVNs for all resources, available time ranges

'alt If imbalance detected
    'CM -> OIM: POST /oim/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
    'OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
    'OIM <-- DSS: operation intent reference with subscribers
    'loop For all subscribers
        'OIM -> DCB2: POST /dcb/v1/operational_intents
        'OIM -> DCB: POST /dcb/v1/operational_intents
    'end
'else If no imbalance detected
    'note over CM: do nothing
'end 

==Position Sharing==
loop 
    CM2 -> CM: GET /cm/v1/operational_intents/{entityid}/telemetry
    CM2 <-- CM: telemetry
end
@enduml