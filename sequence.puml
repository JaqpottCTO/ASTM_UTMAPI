@startuml
participant "Resource operator" as RO
participant "Vehicle operator" as op
participant "Resource\nInformation\nService (RIS)" as RIS
participant "Discovery &\nSynchronization\nService (DSS)" as DSS
participant "Demand\nCapacity\nBalancing\n(DCB)" as DCB
participant "DCB2" as DCB2
participant "Operational\nIntent\nManagement\n(OIM)" as OIM
participant "Conformance\nMonitoring\n(CM)" as CM
participant "CM2" as CM2

==DCB subscribe to resources==
DCB -> DSS: PUT /DSS/v1/subscriptions/resource-subscription/{subscriptionid}
DCB <-- DSS: resource references (empty)

DCB -> DSS: PUT /DSS/v1/subscriptions/operation-subscription/{subscriptionid}
DCB <-- DSS: operation references (empty)

note over DCB
No resources exist. 
Nothing to do yet. 
end note

==Make resources discoverable==
note over RO
Resource is originally
defined here.
end note 
RO -> RIS: Submit initial resource definition, capacity, and status
RIS -> DSS: PUT /DSS/v1/resource-reference/
note over DSS
Resource reference creation
creates an implicit self-subscription
for any changes needed to the resource
due to OIM flight intents.
end note
DSS --> RIS: subscribers, resource-reference including subscription id
loop For each resource subscriber
    DCB <-- RIS: POST /v1/resource-details/{resource-id}  (everything, includes OVN)
end
note over DCB
Assumption: ResourceDetails contains definition,
status, and capacity. 
end note

== Resource capacity, status or definition is adjusted ==
RO -> RIS: Update resource capacity
RIS -> DSS: PUT /DSS/v1/resource-reference/{resource-id}
RIS <-- DSS: subscribers
loop For each resource subscriber
    RIS -> DCB: POST /v1/resource-details/{resource-id}/capacity (includes OVN)
end

RO -> RIS: Update resource status
RIS -> DSS: PUT /DSS/v1/resource-reference/{resource-id}
RIS <-- DSS: subscribers
loop For each resource subscriber
    RIS -> DCB: POST /v1/resource-details/{resource-id}/status (includes OVN)
end

RO -> RIS: Update resource definition
RIS -> DSS: PUT /DSS/v1/resource-reference/{resource-id}
RIS <-- DSS: subscribers
loop For each resource subscriber
    RIS -> DCB: POST /v1/resource-details/{resource-id}/definition (includes OVN)
end

== OIM receives request from operator and submits an operation to the DSS in proposed state == 
op -> OIM: Op Request
OIM -> DSS: PUT /dss/v1/operational_intent_references/{entityId}  (Proposed state)
note over DSS
Does not check any OVNs here.
All operation intents accepted.
end note
OIM <-- DSS: subscribers to notify
loop For all subscribers
    OIM -> DCB: POST /dcb/v1/operational_intents (includes OVN)
    DCB -> DCB: Adjust demand/capacity values
end

== A new subscriber joins == 
DCB2 -> DSS: PUT /dss/v1/subscriptions/resource-subscription/
DCB2 <-- DSS: resource references
loop For each resource reference received
    note over DCB2
    Get all resource details.
    end note
    DCB2 -> RIS: GET /v1/resource-details/{resource-id} (includes OVN)
    DCB2 <-- RIS: resource details (everything)
end
DCB2 -> DSS: PUT /dss/v1/subscriptions/operation-subscription/
DCB2 <-- DSS: operation references
loop For each operation reference received
    note over DCB2
    Get all operation details.
    end note
    DCB2 -> OIM: GET /v1/operation_intents/{operation-id} (includes OVN)
    DCB2 <-- OIM: operation details (everything)
end

== OIM does DCB check and transitions operation to Accepted state (OVNs required) ==
OIM -> DCB: POST /dcb/v1/imbalance/intent
OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

alt If imbalance detected
    note over OIM: Do not update the operation
else If no imbalance detected
    OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Accepted)
    DSS -> DSS: Confirms OVNs are correct
    OIM <-- DSS: operation intent reference with subscribers
    loop For all subscribers
        OIM -> DCB2: POST /dcb/v1/operational_intents
        OIM -> DCB: POST /dcb/v1/operational_intents
    end
end

==Conformance Monitoring==
CM -> DSS: PUT /dss/v1/subscriptions/resource-subscription/
CM <-- DSS: resource references
CM -> RIS: GET /v1/resource-details/{resource-id} (includes OVN)
CM <-- RIS: resource details (everything)
OIM -> CM: POST /cm/v1/operational_intents
'CM -> DSS: PUT /dss/v1/subscriptions/operation-subscription/
'CM <-- DSS: operation references

op -> CM: Vehicle position
alt If vehicle position for operation in Accepted state
    CM -> OIM: POST /oim/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
    note over OIM: OIM does a DCB check
    OIM -> DCB: POST /dcb/v1/imbalance/intent
    OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

    alt If imbalance detected
        note over OIM: Do not update the operation
    else If no imbalance detected
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
        DSS -> DSS: Confirms OVNs are correct
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
    end 
else If vehicle position for operation in Activated state
    CM -> CM: Conformance monitoring
    alt If operation in conformance
        note over CM: Do nothing
    else If operation not in conformance
        CM -> OIM: POST /oim/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
    end
end

==Conformance monitoring when resource capacity changes==
RO -> RIS: Update resource capacity
RIS -> DSS: PUT /DSS/v1/resource-reference/{resource-id}
RIS <-- DSS: subscribers
loop For each resource subscriber
    RIS -> DCB: POST /v1/resource-details/{resource-id}/capacity
    DCB -> DCB: Adjust demand/capacity values
    RIS -> DCB2: POST /v1/resource-details/{resource-id}/capacity
    RIS -> CM: POST /v1/resource-details/{resource-id}/capacity
end
note over CM: DCB check
CM -> DCB: POST /dcb/v1/imbalance/intent
CM <-- DCB: Yes/no, OVNs for all resources, available time ranges

alt If imbalance detected
    CM -> OIM: POST /oim/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
    OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
    OIM <-- DSS: operation intent reference with subscribers
    loop For all subscribers
        OIM -> DCB2: POST /dcb/v1/operational_intents
        OIM -> DCB: POST /dcb/v1/operational_intents
    end
else If no imbalance detected
    note over CM: do nothing
end 

==Position Sharing==
loop 
    CM2 -> CM: GET /cm/v1/operational_intents/{entityid}/telemetry
    CM2 <-- CM: telemetry
end
@enduml