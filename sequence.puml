@startuml
participant "Resource operator" as RO
participant "Vehicle operator" as op
participant "Resource Information Service (RIS)" as RIS
participant "Discovery & Synchronization Service (DSS)" as DSS
participant "Demand Capacity Balancing (DCB)" as DCB
participant "DCB2" as DCB2
participant "Operational Intent Management (OIM)" as OIM
participant "Conformance Monitoring (CM)" as CM
participant "CM2" as CM2

==DCB subscribe to resources==
DCB -> DSS: PUT /dss/v1/subscriptions/{subscriptionid}
note over DSS
    Subscription request includes
    indication of which data triggers
    notification when changed: 
    operations, constraints, and resources. 
end note
DCB <-- DSS: operational intent references & resource references

note over DCB
No resources or operational 
intents exist currently. 
Nothing to do yet. 
end note

==Make resources discoverable==
note over RO
Resource is originally defined here.
end note 
RO -> RIS: Submit initial resource definition, capacity, and status
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}
note over DSS
Resource reference creation
creates an implicit self-subscription
for any changes needed to the resource
due to OIM flight intents.
end note
DSS --> RIS: subscribers, resource-reference including subscription id & ovn
loop For each resource subscriber
    DCB <-- RIS: POST /dcb/v1/resource_details\n(includes reference, definition, capacity and status)
end
note over DCB
Assumption: ResourceDetails contains definition, status and capacity. 
end note

== Resource capacity, status or definition is updated ==
RO -> RIS: Update a future resource capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=CAPACITY)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource_details/{entityid}\n(includes resource reference, definition, capacity and status)
end

RO -> RIS: Update resource status or current capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=STATUS)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource_details/{entityid}\n(includes resource reference, definition, capacity and status)
end

RO -> RIS: Update resource definition or default capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=DEFINITION)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource-details/{resource-id}\n(includes resource reference, definition, capacity and status)
end

== OIM receives request from operator and submits an operation to the DSS in proposed state == 
op -> OIM: Op Request
OIM -> DSS: PUT /dss/v1/operational_intent_references/{entityId}  (Proposed state)
note over DSS
Does not check any OVNs here. All operation intents accepted.
end note
OIM <-- DSS: subscribers to notify
loop For all subscribers
    OIM -> DCB: POST /dcb/v1/operational_intents (includes OVN)
    DCB -> DCB: Adjust demand/capacity values
end
OIM -> DCB: PUT /dcb/v1/imbalance_subscriptions/{subscriptionid}

== A new subscriber joins == 
DCB2 -> DSS: PUT /dss/v1/subscriptions/{subscriptionid}
DCB2 <-- DSS: operational intent references & resource references
loop For each resource reference received
    note over DCB2
    Get all resource details.
    end note
    DCB2 -> RIS: GET /ris/v1/resource_details/{entityid}\n(includes resource reference, definition, capacity and status)
    DCB2 <-- RIS: resource details (includes resource reference, definition, capacity and status)
end
loop For each operation reference received
    note over DCB2
    Get all operation details.
    end note
    DCB2 -> OIM: GET /oim/v1/operation_intents/{operation-id} (includes OVN)
    DCB2 <-- OIM: operation details (everything)
end

== OIM does DCB check and transitions operation to Accepted state (OVNs required) ==
OIM -> DCB: POST /dcb/v1/imbalance/recheck
OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

alt If imbalance detected
    note over OIM: Do not update the operation
else If no imbalance detected
    OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Accepted)
    DSS -> DSS: Confirms OVNs are correct
    OIM <-- DSS: operation intent reference with subscribers
    loop For all subscribers
        OIM -> DCB2: POST /dcb/v1/operational_intents
        OIM -> DCB: POST /dcb/v1/operational_intents
    end
end

==Conformance Monitoring==
CM -> DSS: PUT /dss/v1/subscriptions/
CM <-- DSS: resource references
CM -> RIS: GET /ris/v1/resource-details/{resource-id} (includes OVN)
CM <-- RIS: resource details (everything)
OIM -> CM: POST /cm/v1/operational_intents

op -> OIM: Operation ready to activate
note over OIM: OIM does a DCB check
OIM -> DCB: POST /dcb/v1/imbalance/recheck
OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

alt If imbalance detected
    note over OIM: Do not update the operation
    OIM -> op: Op cannot activate
else If no imbalance detected
    OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
    DSS -> DSS: Confirms OVNs are correct
    OIM <-- DSS: operation intent reference with subscribers
    loop For all subscribers
        OIM -> DCB2: POST /dcb/v1/operational_intents
        OIM -> DCB: POST /dcb/v1/operational_intents
    end
    OIM -> op: Op can activate
end 

op -> CM: Tracking info for CM
CM -> CM: Conformance monitoring
alt If operation in conformance
    note over CM: Do nothing
else If operation not in conformance
    CM -> OIM: PUT /oim/v1/conformance_alert/{entityId}/\n(Nonconforming)
    OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Nonconforming)
    OIM <-- DSS: operation intent reference with subscribers
    loop For all subscribers
        OIM -> DCB2: POST /dcb/v1/operational_intents
        OIM -> DCB: POST /dcb/v1/operational_intents
    end
    OIM -> op: Op nonconformant
    alt If operator can return to conformance
        op -> CM: Tracking info for CM conformant
        CM -> CM: Conformance monitoring
        CM -> OIM: PUT /oim/v1/conformance_alert/{entityId}/\n(Reconforming)
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
        OIM -> op: Op activated
    else If operator can replan intent
        op -> op: Replan intent
        op -> OIM: Updated op request
        note over OIM: OIM does a DCB check
        OIM -> DCB: POST /dcb/v1/imbalance/intent
        OIM <-- DCB: Yes/no, OVNs for all resources, available time ranges

        alt If imbalance detected
            note over OIM: Do not update the operation
            OIM -> op: Op cannot activate
        else If no imbalance detected
            OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Activated)
            DSS -> DSS: Confirms OVNs are correct
            OIM <-- DSS: operation intent reference with subscribers
            loop For all subscribers
                OIM -> DCB2: POST /dcb/v1/operational_intents
                OIM -> DCB: POST /dcb/v1/operational_intents
            end
            OIM -> op: Op activated
        end 
    else If op cannot become conformant in time limit
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = Contingent)
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
        OIM -> op: Op Contingent
    end
end

==Conformance monitoring when resource capacity changes==
RO -> RIS: Update a future resource capacity
RIS -> DSS: PUT /dss/v1/resource_references/{entityid}/{ovn} (updateType=CAPACITY)
RIS <-- DSS: subscribers, resource-reference including updated ovn
loop For each resource subscriber
    RIS -> DCB: PUT /dcb/v1/resource_details/{entityid}\n(includes resource reference, definition, capacity and status)
    DCB -> DCB: Adjust demand/capacity values
    alt If imbalance detected
        DCB -> OIM: POST /oim/v1/imbalance
        OIM -> DSS: PUT /dss/v1/operation_intent_references/{entityId}/{ovn}\n(state = DCB-Noncompliant)
        OIM <-- DSS: operation intent reference with subscribers
        loop For all subscribers
            OIM -> DCB2: POST /dcb/v1/operational_intents
            OIM -> DCB: POST /dcb/v1/operational_intents
        end
    else If no imbalance detected
        note over DCB: do nothing
    end
    RIS -> DCB2: PUT /dcb/v1/resource_details/{entityid}\n(includes resource reference, definition, capacity and status)
    RIS -> CM: PUT /cm/v1/resource_details/{entityid}\n(includes resource reference, definition, capacity and status)
end

==Position Sharing==
loop 
    CM2 -> CM: GET /cm/v1/operational_intents/{entityid}/telemetry
    CM2 <-- CM: Tracking info for CM
end
@enduml