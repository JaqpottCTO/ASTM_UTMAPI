---
openapi: 3.0.2
info:
  title: ASTM UAM PSU DSS API
  description: |-
    Interface definitions for communication between a UAS Service Supplier (USS) and a Discovery and Synchronization Service (DSS), as well as for communication between two USSs.
    DSS functionality includes identification of peer UTM USS instances (managing flight operational intents and constraints). USS functionality includes sharing details of flight operational intents and constraints.
    Note: Unless otherwise specified, fields specified in a message but not declared in the API must be ignored.
    Whenever a object-type field may be omitted, it may also be set to null for the same effect.
  version: 0.0.0
servers:
- url: /
security:
- Authority:
  - utm.strategic_coordination
  - utm.constraint_management
  - utm.constraint_processing
  - utm.conformance_monitoring_sa
  - utm.availability_arbitration
tags:
- name: Operational intent references
  description: Endpoints exposed by the DSS for interaction with references to operational intents.
- name: Resource references
  description: Endpoints exposed by the DSS for interaction with references to resources.
- name: Constraint references
  description: Endpoints exposed by the DSS for interaction with references to constraints.
- name: Subscriptions
  description: Endpoints exposed by the DSS for interaction with subscription entities.
- name: Reports
  description: Endpoints exposed by the DSS for reporting peer DSS issues.
- name: Availability
  description: Endpoints exposed by the DSS for declaring USS availability.
- name: Logging
  description: "Pseudo-endpoints not intended to be implemented literally, but rather to illustrate logging data formats"
- name: dss
  description: Endpoints exposed by the DSS server.
- name: p2p_utm
  description: Endpoints exposed by UTM USSs for peer-peer communication.

paths:
  /dss/v1/operational_intent_references/query:
    summary: "Query all operational intents in the DSS that intersect with a specified geographic area, altitude-range, and time-range."
    description: Interface to operational intent references in the DSS.
    post:
      tags:
      - Operational intent references
      - dss
      summary: Query all operational intent references in the specified area/volume/time from the DSS.
      description: "Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body."
      operationId: queryOperationalIntentReferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryOperationalIntentReferenceParameters'
        required: true
      responses:
        "200":
          description: Operational intents were successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryOperationalIntentReferenceResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The requested area was too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.conformance_monitoring_sa
  /dss/v1/operational_intent_references/{entityid}:
    summary: Create/read endpoint for a specified operational intent reference in the DSS.
    get:
      tags:
      - Operational intent references
      - dss
      summary: Retrieve the specified operational intent reference from the DSS.
      operationId: getOperationalIntentReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the operational intent.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      responses:
        "200":
          description: Operational intent reference was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationalIntentReferenceResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: The requested Entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.conformance_monitoring_sa
    put:
      tags:
      - Operational intent references
      - dss
      summary: Create the specified operational intent reference in the DSS.
      operationId: createOperationalIntentReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the operational intent.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationalIntentReferenceParameters'
        required: true
      responses:
        "201":
          description: An operational intent reference was created successfully in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationalIntentReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the operational intent in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
        "412":
          description: The client attempted to transition the operational intent to Accepted or Activated while marked as Down in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The area of the operational intent is too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.strategic_coordination
        - utm.constraint_processing
      - Authority:
        - utm.conformance_monitoring_sa
  /dss/v1/operational_intent_references/{entityid}/{ovn}:
    summary: Update endpoint for a specified operational intent reference in the DSS.
    put:
      tags:
      - Operational intent references
      - dss
      summary: Update the specified operational intent reference in the DSS.
      operationId: updateOperationalIntentReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the operational intent.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      - name: ovn
        in: path
        description: Opaque version number of the existing operational intent reference.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityOVN'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationalIntentReferenceParameters'
        required: true
      responses:
        "200":
          description: An operational intent reference was updated successfully in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationalIntentReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the operational intent in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * The provided `ovn` does not match the current version of the existing operational intent.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
        "412":
          description: The client attempted to transition the operational intent to Accepted or Activated while marked as Down in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The area of the operational intent is too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.strategic_coordination
        - utm.constraint_processing
      - Authority:
        - utm.conformance_monitoring_sa
    delete:
      tags:
      - Operational intent references
      - dss
      summary: Remove the specified operational intent reference from the DSS.
      operationId: deleteOperationalIntentReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the operational intent.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      - name: ovn
        in: path
        description: Opaque version number of the existing operational intent reference.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityOVN'
      responses:
        "200":
          description: The specified operational intent was successfully removed from the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationalIntentReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the operational intent in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: The requested Entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided `ovn` does not match the current version of the existing operational intent.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "412":
          description: The client attempted to delete the operational intent while marked as Down in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.conformance_monitoring_sa
  /dss/v1/resource_references/query:
    summary: Query all resource references in the DSS that intersect with a specified area/volume/time.
    post:
      tags:
      - Resource references
      - dss
      summary: Query all resource references in the specified area/volume from the DSS.
      description: "Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body."
      operationId: queryResourceReferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryResourceReferenceParameters'
        required: true
      responses:
        "200":
          description: Resource references were successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResourceReferencesResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The requested area was too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.resource_management
      - Authority:
        - utm.resource_processing
  /dss/v1/resource_references/{entityid}:
    summary: Create/read endpoint for a specified resource reference in the DSS.
    get:
      tags:
      - Resource references
      - dss
      summary: Retrieve the specified resource reference from the DSS.
      operationId: getResourceReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      responses:
        "200":
          description: Resource reference was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceReferenceResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: The requested Entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.resource_management
      - Authority:
        - utm.resource_processing
    put:
      tags:
      - Resource references
      - dss
      summary: Create the specified resource reference in the DSS.
      operationId: createResourceReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostResourceReferenceParameters'
        required: true
      responses:
        "201":
          description: A resource reference was created successfully in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeResourceReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the constraint in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * A constraint with the provided ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The area of the resource is too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.resource_management
  /dss/v1/resource_references/{entityid}/{ovn}:
    summary: Update/delete endpoint for a specified resource reference in the DSS.
    put:
      tags:
      - Resource references
      - dss
      summary: Update the specified resource reference in the DSS.
      operationId: updateResourceReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      - name: ovn
        in: path
        description: Opaque version number of the existing operational intent reference.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityOVN'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutResourceReferenceParameters'
        required: true
      responses:
        "200":
          description: A resource reference was updated successfully in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeResourceReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the resource in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided `ovn` does not match the current version of the existing resource.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The area of the resource is too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.resource_management
    delete:
      tags:
      - Resource references
      - dss
      summary: Delete the specified resource reference from the DSS.
      operationId: deleteResourceReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      - name: ovn
        in: path
        description: Opaque version number of the existing operational intent reference.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityOVN'
      responses:
        "200":
          description: The resource was successfully removed from the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeResourceReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the resource in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: The requested Entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided `ovn` does not match the current version of the existing resource.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.resource_management
  /dss/v1/constraint_references/query:
    summary: Query all constraint references in the DSS that intersect with a specified area/volume/time.
    post:
      tags:
      - Constraint references
      - dss
      summary: Query all constraint references in the specified area/volume from the DSS.
      description: "Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body."
      operationId: queryConstraintReferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryConstraintReferenceParameters'
        required: true
      responses:
        "200":
          description: Constraint references were successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryConstraintReferencesResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The requested area was too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.constraint_processing
  /dss/v1/constraint_references/{entityid}:
    summary: Create/read endpoint for a specified constraint reference in the DSS.
    get:
      tags:
      - Constraint references
      - dss
      summary: Retrieve the specified constraint reference from the DSS.
      operationId: getConstraintReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      responses:
        "200":
          description: Constraint reference was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintReferenceResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: The requested Entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.constraint_processing
    put:
      tags:
      - Constraint references
      - dss
      summary: Create the specified constraint reference in the DSS.
      operationId: createConstraintReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintReferenceParameters'
        required: true
      responses:
        "201":
          description: A constraint reference was created successfully in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the constraint in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * A constraint with the provided ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The area of the constraint is too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_management
  /dss/v1/constraint_references/{entityid}/{ovn}:
    summary: Update/delete endpoint for a specified constraint reference in the DSS.
    put:
      tags:
      - Constraint references
      - dss
      summary: Update the specified constraint reference in the DSS.
      operationId: updateConstraintReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      - name: ovn
        in: path
        description: Opaque version number of the existing operational intent reference.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityOVN'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintReferenceParameters'
        required: true
      responses:
        "200":
          description: A constraint reference was updated successfully in the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the constraint in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided `ovn` does not match the current version of the existing constraint.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The area of the constraint is too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_management
    delete:
      tags:
      - Constraint references
      - dss
      summary: Delete the specified constraint reference from the DSS.
      operationId: deleteConstraintReference
      parameters:
      - name: entityid
        in: path
        description: EntityID of the constraint.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityID'
      - name: ovn
        in: path
        description: Opaque version number of the existing operational intent reference.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/EntityOVN'
      responses:
        "200":
          description: The constraint was successfully removed from the DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the constraint in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: The requested Entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * The provided `ovn` does not match the current version of the existing constraint.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_management
  /dss/v1/subscriptions/query:
    summary: Subscriptions for airspace updates to a volume of interest.
    post:
      tags:
      - Subscriptions
      - dss
      summary: Query all subscriptions in the specified area/volume from the DSS.
      description: |-
        Query subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
        A query of subscriptions may be needed to validate what subscriptions a subscriber has in place, or to identify existing subscription after a loss of data on the part of the subscriber.
        Note that this parameter is a JSON object (in the 'request-body'). Note that either or both of the 'altitude' and 'time' values may be omitted from this parameter.
        Only subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing subscriptions in an area.
      operationId: querySubscriptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuerySubscriptionParameters'
        required: true
      responses:
        "200":
          description: Subscriptions were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySubscriptionsResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: The requested area was too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.strategic_coordination
  /dss/v1/subscriptions/{subscriptionid}:
    summary: Create/read endpoint for a specific subscription in the DSS.
    get:
      tags:
      - Subscriptions
      - dss
      summary: Retrieve the specified subscription from the DSS.
      description: Retrieve a specific subscription.
      operationId: getSubscription
      parameters:
      - name: subscriptionid
        in: path
        description: SubscriptionID of the subscription of interest.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/SubscriptionID'
      responses:
        "200":
          description: Subscription information was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: A subscription with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.strategic_coordination
    put:
      tags:
      - Subscriptions
      - dss
      summary: Create the specified subscription in the DSS.
      description: |-
        Create a subscription.
        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      operationId: createSubscription
      parameters:
      - name: subscriptionid
        in: path
        description: SubscriptionID of the subscription of interest.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/SubscriptionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      responses:
        "200":
          description: A new subscription was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the subscription in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * Client attempted to request notifications for an Entity type to which the scopes included in the access token do not provide access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * A subscription with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client may have issued too many requests within a small period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.strategic_coordination
  /dss/v1/subscriptions/{subscriptionid}/{version}:
    summary: Update/delete a specific subscription in the DSS.
    put:
      tags:
      - Subscriptions
      - dss
      summary: Update the specified subscription in the DSS.
      description: |-
        Update a subscription.
        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
        The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to update a subscription upon which an operational intent depends, and this update would cause the operational intent to lose subscription coverage, the update will be rejected by the DSS as a bad request.
      operationId: updateSubscription
      parameters:
      - name: subscriptionid
        in: path
        description: SubscriptionID of the subscription of interest.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/SubscriptionID'
      - name: version
        in: path
        description: Version of the subscription to be modified.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      responses:
        "200":
          description: A subscription was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
        "400":
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the subscription in a disallowed way.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * Client attempted to request notifications for an Entity type to which the scopes included in the access token do not provide access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * A subscription with the specified ID already exists and is managed by a different client.
            * The provided `version` does not match the current subscription.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client may have issued too many requests within a small period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.strategic_coordination
    delete:
      tags:
      - Subscriptions
      - dss
      summary: Remove the specified subscription from the DSS.
      description: "The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to delete a subscription upon which an operational intent depends, the deletion will be rejected by the DSS as a bad request."
      operationId: deleteSubscription
      parameters:
      - name: subscriptionid
        in: path
        description: SubscriptionID of the subscription of interest.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/SubscriptionID'
      - name: version
        in: path
        description: Version of the subscription to be modified.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Subscription was successfully removed from DSS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
        "400":
          description: One or more input parameters were missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: A subscription with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: |-
            * A subscription with the specified ID is managed by a different client.
            * The provided `version` does not match the current subscription.
            * Despite repeated attempts, the DSS was unable to complete the deletion because of other simultaneous changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.strategic_coordination
  /dss/v1/reports:
    summary: Error reports of potential operational issues relevant to DSSs.
    post:
      tags:
      - Reports
      - dss
      summary: Report information about communication issues to a DSS.
      description: Report issues to a DSS. Data sent to this endpoint is archived.
      operationId: makeDssReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      responses:
        "201":
          description: A new Report was created successfully (and archived).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        "400":
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: '* The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.conformance_monitoring_sa
      - Authority:
        - utm.availability_arbitration
  /dss/v1/uss_availability/{uss_id}:
    summary: Availability status of a USS
    get:
      tags:
      - Availability
      - dss
      summary: Get availability status of a USS.
      description: Get availability status of a USS.
      operationId: getUssAvailability
      parameters:
      - name: uss_id
        in: path
        description: Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Availability status of specified USS was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UssAvailabilityStatusResponse'
        "400":
          description: '* One or more parameters were missing or invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: '* The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.availability_arbitration
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.conformance_monitoring_sa
    put:
      tags:
      - Availability
      - dss
      summary: Set availability status of a USS.
      description: Set availability status of a USS.
      operationId: setUssAvailability
      parameters:
      - name: uss_id
        in: path
        description: Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUssAvailabilityStatusParameters'
        required: true
      responses:
        "200":
          description: Availability status of specified USS was successfully updated. Returns 
            list of subscribers who must be notified. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeUssAvailabilityStatusResponse'
        "400":
          description: '* One or more parameters were missing or invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: '* The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "429":
          description: The client issued too many requests in a short period of time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - Authority:
        - utm.availability_arbitration
components:
  schemas:
    UUIDv4Format:
      maxLength: 36
      minLength: 36
      pattern: "^[0-9a-fA-F]{8}\\\\-[0-9a-fA-F]{4}\\\\-4[0-9a-fA-F]{3}\\\\-[8-b][0-9a-fA-F]{3}\\\\-[0-9a-fA-F]{12}$"
      type: string
      description: String whose format matches a version-4 UUID according to RFC 4122.
      format: uuid
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    EntityID:
      description: Identifier for an Entity communicated through the DSS.  Formatted as a UUIDv4.
      example: 2f8343be-6482-4d1b-a474-16847e01af1e
      anyOf:
      - $ref: '#/components/schemas/UUIDv4Format'
    EntityOVN:
      title: EntityOVN
      maxLength: 128
      minLength: 16
      type: string
      description: "A token associated with a particular UTM Entity+version created by the DSS upon creation or modification of an Entity reference and provided to the client creating or modifying the Entity reference.  The EntityOVN is stored privately by the DSS and then compared against entries in a Key provided to mutate the airspace.  The EntityOVN is also provided by the client whenever that client transmits the full information of the Entity (either via GET, or via a subscription notification)."
      example: 9d158f59-80b7-4c11-9c0c-8a2b4d936b2d
    SubscriptionID:
      description: Identifier for a subscription communicated through the DSS.  Formatted as a UUIDv4.
      example: 78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f
      anyOf:
      - $ref: '#/components/schemas/UUIDv4Format'
    Key:
      type: array
      description: "Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current Key constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client."
      items:
        $ref: '#/components/schemas/EntityOVN'
      default: []
    Time:
      required:
      - format
      - value
      type: object
      properties:
        value:
          type: string
          description: RFC3339-formatted time/date string.  The time zone must be 'Z'.
          format: date-time
          example: 1985-04-12T23:20:50.52Z
        format:
          type: string
          enum:
          - RFC3339
    Radius:
      required:
      - units
      - value
      type: object
      properties:
        value:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: "Distance from the centerpoint of a circular area, along the WGS84 ellipsoid."
          format: float
          example: 300.183
        units:
          type: string
          description: FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
          enum:
          - M
    Altitude:
      required:
      - reference
      - units
      - value
      type: object
      properties:
        value:
          maximum: 100000
          exclusiveMaximum: false
          minimum: -8000
          exclusiveMinimum: false
          type: number
          description: "The numeric value of the altitude. Note that min and max values are added as a sanity check. As use cases evolve and more options are made available in terms of units of measure or reference systems, these bounds may be re-evaluated."
          format: double
        reference:
          type: string
          description: "A code indicating the reference for a vertical distance. See AIXM 5.1 and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate plans to allow other options. FIXM and AIXM allow for 'SFC' which is equivalent to AGL."
          enum:
          - W84
        units:
          type: string
          description: "The reference quantities used to express the value of altitude. See FIXM 4.2. Currently, UTM only allows meters with no immediate plans to allow other options."
          enum:
          - M
    Latitude:
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      description: "Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid."
      format: double
      example: 34.123
    Longitude:
      maximum: 180
      exclusiveMaximum: false
      minimum: -180
      exclusiveMinimum: false
      type: number
      description: "Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid."
      format: double
      example: -118.456
    Polygon:
      required:
      - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'
      description: "An enclosed area on the earth. The bounding edges of this polygon are defined to be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude. The winding order must be interpreted as the order which produces the smaller area. The path between two vertices is defined to be the shortest possible path between those vertices. Edges may not cross. Vertices may not be duplicated.  In particular, the final polygon vertex must not be identical to the first vertex."
    LatLngPoint:
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'
      description: Point on the earth's surface.
    Circle:
      type: object
      properties:
        center:
          $ref: '#/components/schemas/LatLngPoint'
        radius:
          $ref: '#/components/schemas/Radius'
      description: A circular area on the surface of the earth.
    Volume3D:
      type: object
      properties:
        outline_circle:
          description: A circular geographic shape on the surface of the earth.
          anyOf:
          - $ref: '#/components/schemas/Circle'
        outline_polygon:
          description: A polygonal geographic shape on the surface of the earth.
          anyOf:
          - $ref: '#/components/schemas/Polygon'
        altitude_lower:
          description: "Minimum bounding altitude of this volume. Must be less than altitude_upper, if specified."
          anyOf:
          - $ref: '#/components/schemas/Altitude'
        altitude_upper:
          description: "Maximum bounding altitude of this volume. Must be greater than altitude_lower, if specified."
          anyOf:
          - $ref: '#/components/schemas/Altitude'
      description: A three-dimensional geographic volume consisting of a vertically-extruded shape. Exactly one outline must be specified.
    Volume4D:
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          description: Beginning time of this volume. Must be before time_end.
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of this volume. Must be after time_start.
          anyOf:
          - $ref: '#/components/schemas/Time'
      description: Contiguous block of geographic spacetime.
    ResourceOccupation:
      required:
        - resource_id
        - resource_ovn
        - operation_ovns
      type: object
      properties:
        resource_id:
          description: |-
            The ID of a resources being occupied or crossed by the operational intent. 
            Details of the crossing times and durations are also shared peer-to-peer when the
            operational intent trajectory is shared. 
          $ref: '#/components/schemas/EntityID'
        resource_ovn:
          description: |-
            The OVN of the resource being occupied or crossed by the operational intent. 
            This proves the operation considers the latest status and capacity of the resource. 
          $ref: '#/components/schemas/EntityOVN'
        operation_ovns:
          description: |-
            The OVNs of all operations contributing to demand at this resource during the
            relevant times based upon resource demand & capacity requirements. 
          type: array
          items:
            $ref: '#/components/schemas/EntityOVN'
    Volume4DExtent:
      required:
      - volume4D
      - occupied_resources
      type: object
      properties:
        volume4d:
          $ref: '#/components/schemas/Volume4D'
        occupied_resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceOccupation'
          description: List of resources which will be fully occupied during the duration of the volume.  
      description: |-
        A 4D volume which includes a list of resources which will be fully occupied 
        during the duration of the volume. 
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Human-readable message indicating what error occurred and/or why.
          example: "The error occurred because [...]"
      description: Human-readable string returned when an error occurs as a result of a USS - DSS transaction.
    SubscriptionState:
      required:
      - notification_index
      - subscription_id
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
      description: State of subscription which is causing a notification to be sent.
    SubscriberToNotify:
      required:
      - subscriptions
      - uss_base_url
      type: object
      properties:
        subscriptions:
          minItems: 1
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
      description: "Subscriber to notify of a change in the airspace.  This is provided by the DSS to a client changing the airspace, and it is the responsibility of that client to send a notification to the specified USS according to the change made to the airspace."
    Subscription:
      required:
      - id
      - notification_index
      - uss_base_url
      - version
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionID'
        version:
          type: string
          description: Version of the subscription that the DSS changes every time a USS changes the subscription.  The DSS incrementing the notification_index does not constitute a change that triggers a new version.  A USS must specify this version when modifying an existing subscription to ensure consistency in read-modify-write operations and distributed systems.
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          description: "If set, this subscription will not receive notifications involving airspace changes entirely before this time."
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: "If set, this subscription will not receive notifications involving airspace changes entirely after this time."
          anyOf:
          - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operational_intents:
          type: boolean
          description: "If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true."
          default: false
        notify_for_constraints:
          type: boolean
          description: "If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true."
          default: false
        notify_for_resources:
          type: boolean
          description: "If true, trigger notifications when resources are created, updated, or deleted.  Otherwise, changes in resources should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true."
          default: false
        implicit_subscription:
          type: boolean
          description: "True if this subscription was implicitly created by the DSS via the creation of an operational intent, and should therefore be deleted by the DSS when that operational intent is deleted."
          default: false
        dependent_operational_intents:
          type: array
          description: List of IDs for operational intents that are dependent on this subscription.
          items:
            $ref: '#/components/schemas/EntityID'
          default: []
      description: "Specification of a geographic area that a client is interested in on an ongoing basis (e.g., \"planning area\")."
    SubscriptionNotificationIndex:
      minimum: 0
      exclusiveMinimum: false
      type: integer
      description: Tracks the notifications sent for a subscription so the subscriber can detect missed notifications more easily.
      format: int32
      default: 0
    QuerySubscriptionParameters:
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'
      description: Parameters for a request to find subscriptions matching the provided criteria.
    QuerySubscriptionsResponse:
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          type: array
          description: Subscriptions that overlap the specified geographic area.
          items:
            $ref: '#/components/schemas/Subscription'
          default: []
      description: Response to DSS query for subscriptions in a particular geographic area.
    GetSubscriptionResponse:
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
      description: Response to DSS request for the subscription with the given id.
    PutSubscriptionParameters:
      required:
      - uss_base_url
      type: object
      properties:
        area_of_interest:
          description: |-
            Volume of airspace to subscribe to.
            This subscription will automatically be deleted after its end time if it has not been refreshed by then. 
            Note that some Entities triggering notifications may lie entirely outside the requested area.
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
        resource_ids:
          description: List of resources for which to create the subscription. 
          type: array
          items:
            $ref: '#/components/schemas/EntityID'
        time_start:
          description: If start time is not specified, it will default to the time the request is processed. 
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: If end time is not specified, the value will be chosen automatically by the DSS. 
            The end time may not be in the past.
          anyOf:
          - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operational_intents:
          type: boolean
          description: "If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true."
          default: false
        notify_for_constraints:
          type: boolean
          description: "If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true."
          default: false
        notify_for_resources:
          type: boolean
          description: "If true, trigger notifications when resources are created, updated, or deleted.  Otherwise, changes in resources should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true."
          default: false
      description: Parameters for a request to create/update a subscription in the DSS.  At least one form of notifications must be requested.
        At least one of the volume_of_interest or resource_ids must be provided. A combination of volume and resource ids may be provided. 
    SubscriptionUssBaseURL:
      description: The base URL of a USS implementation of the parts of the USS-USS API necessary for receiving the notifications requested by this subscription.
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'
    PutSubscriptionResponse:
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
        operational_intent_references:
          type: array
          description: "Operational intents in or near the subscription area at the time of creation/update, if `notify_for_operational_intents` is true."
          items:
            $ref: '#/components/schemas/OperationalIntentReference'
          default: []
        constraint_references:
          type: array
          description: "Constraints in or near the subscription area at the time of creation/update, if `notify_for_constraints` is true."
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []
        resource_references:
          type: array
          description: "Resources in or near the subscription area at the time of creation/update, if `notify_for_resources` is true."
          items:
            $ref: '#/components/schemas/ResourceReference'
          default: []
      description: Response for a request to create or update a subscription.
    DeleteSubscriptionResponse:
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
      description: Response for a successful request to delete a subscription.
    UssBaseURL:
      type: string
      description: "The base URL of a USS implementation of part or all of the USS-USS API. Per the USS-USS API, the full URL of a particular resource can be constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base URL. Accordingly, this URL may not have a trailing '/' character."
      example: https://uss.example.com/utm
    OperationalIntentState:
      type: string
      description: |-
        State of an operational intent.
        'Accepted': Operational intent is created and shared, but not yet in use; see standard text for more details.
        The create or update request for this operational intent reference must include a Key containing all OVNs for all relevant Entities.
        'Activated': Operational intent is in active use; see standard text for more details.
        The create or update request for this operational intent reference must include a Key containing all OVNs for all relevant Entities.
        'Nonconforming': UA is temporarily outside its volumes, but the situation is expected to be recoverable; see standard text for more details.
        In this state, the `/uss/v1/operational_intents/{entityid}/telemetry` USS-USS endpoint should respond, if available, to queries from USS peers.  The create or update request for this operational intent may omit a Key in this case because the operational intent is being adjusted as flown and cannot necessarily deconflict.
        'Contingent': UA is considered unrecoverably unable to conform with its coordinate operational intent; see standard text for more details.
        This state must transition to Ended.  In this state, the `/uss/v1/operational_intents/{entityid}/telemetry` USS-USS endpoint should respond, if available, to queries from USS peers.  The create or update request for this operational intent may omit a Key in this case because the operational intent is being adjusted as flown and cannot necessarily deconflict.
      enum:
      - Accepted
      - Activated
      - Nonconforming
      - Contingent
    OperationalIntentReference:
      required:
      - id
      - manager
      - state
      - subscription_id
      - time_end
      - time_start
      - uss_availability
      - uss_base_url
      - version
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        manager:
          type: string
          description: Created by the DSS based on creating client's ID (via access token).  Used internal to the DSS for restricting mutation and deletion operations to manager.  Used by USSs to reject operational intent update notifications originating from a USS that does not manage the operational intent.
          example: uss1
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          description: "Numeric version of this operational intent which increments upon each change in the operational intent, regardless of whether any field of the operational intent reference changes.  A USS with the details of this operational intent when it was at a particular version does not need to retrieve the details again until the version changes."
          format: int32
          example: 1
        state:
          $ref: '#/components/schemas/OperationalIntentState'
        ovn:
          description: "Opaque version number of this operational intent.  Populated only when the OperationalIntentReference is managed by the USS retrieving or providing it.  Not populated when the OperationalIntentReference is not managed by the USS retrieving or providing it (instead, the USS must obtain the OVN from the details retrieved from the managing USS)."
          anyOf:
          - $ref: '#/components/schemas/EntityOVN'
        time_start:
          description: Beginning time of operational intent.
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of operational intent.
          anyOf:
          - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/OperationalIntentUssBaseURL'
        subscription_id:
          description: The ID of the subscription that is ensuring the operational intent manager receives relevant airspace updates.
          anyOf:
          - $ref: '#/components/schemas/SubscriptionID'
        occupied_resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceOccupation'
          description: List of resources which will be fully occupied during the duration of the intent. 
      description: "The high-level information of a planned or active operational intent with the URL of a USS to query for details.  Note: 'ovn' is returned ONLY to the USS that created the operational intent but NEVER to other USS instances."
    OperationalIntentUssBaseURL:
      description: "The base URL of a USS implementation that implements the parts of the USS-USS API necessary for providing the details of this operational intent, and telemetry during non-conformance or contingency, if applicable."
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'
    PutOperationalIntentReferenceParameters:
      required:
      - extents
      - state
      - uss_base_url
      type: object
      properties:
        extents:
          $ref: "#/components/schemas/OperationalExtents"
        key:
          description: "Proof that the USS creating or mutating this operational intent was aware of the current state of the airspace, with the expectation that this operational intent is therefore deconflicted from all relevant features in the airspace.  This field is not required when declaring an operational intent Nonconforming or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required. OVNs for constraints are required if and only if the USS managing this operational intent is performing the constraint processing role, which is indicated by whether the subscription associated with this operational intent triggers notifications for constraints.  The key does not need to contain the OVN for the operational intent being updated."
          anyOf:
          - $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationalIntentState'
        uss_base_url:
          $ref: '#/components/schemas/OperationalIntentUssBaseURL'
        subscription_id:
          description: "The ID of an existing subscription that the USS will use to keep the operator informed about updates to relevant airspace information. If this field is not provided when the operational intent is in the Activated, Nonconforming, or Contingent state, then the `new_subscription` field must be provided in order to provide notification capability for the operational intent.  The subscription specified by this ID must cover at least the area over which this operational intent is conducted, and it must provide notifications for operational intents."
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        new_subscription:
          description: "If an existing subscription is not specified in `subscription_id`, and the operational intent is in the Activated, Nonconforming, or Contingent state, then this field must be populated.  When this field is populated, an implicit subscription will be created and associated with this operational intent, and will generally be deleted automatically upon the deletion of this operational intent."
          anyOf:
          - $ref: '#/components/schemas/ImplicitSubscriptionParameters'
      description: |-
        Parameters for a request to create an OperationalIntentReference in the DSS. 
        A subscription to changes overlapping this volume may be implicitly created, 
        but this can be overridden by providing the (optional) 'subscription_id' to use. 
        Note: The implicit subscription is managed by the DSS, not the USS.
    ImplicitSubscriptionParameters:
      required:
      - uss_base_url
      type: object
      properties:
        uss_base_url:
          description: "The base URL of a USS implementation of the parts of the USS-USS API necessary for receiving the notifications that the operational intent must be aware of.  This includes, at least, notifications for relevant changes in operational intents."
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operational_intents:
          type: boolean
          description: "If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true."
          default: false
        notify_for_constraints:
          type: boolean
          description: "If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true."
          default: false
        notify_for_resources:
          type: boolean
          description: "If true, trigger notifications when resources are created, updated, or deleted.  Otherwise, changes in resources should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true."
          default: false  
      description: Information necessary to create a subscription to serve a single operational intent's notification needs.
    GetOperationalIntentReferenceResponse:
      required:
      - operational_intent_reference
      type: object
      properties:
        operational_intent_reference:
          $ref: '#/components/schemas/OperationalIntentReference'
      description: Response to DSS request for the OperationalIntentReference with the given ID.
    ChangeOperationalIntentReferenceResponse:
      required:
      - operational_intent_reference
      - subscribers
      type: object
      properties:
        subscribers:
          type: array
          description: DSS subscribers that this client now has the obligation to notify of the operational intent changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/operational_intents` path API.  The client's own subscriptions will also be included in this list.
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        operational_intent_reference:
          $ref: '#/components/schemas/OperationalIntentReference'
      description: "Response to a request to create, update, or delete an OperationalIntentReference in the DSS."
    QueryOperationalIntentReferenceParameters:
      type: object
      properties:
        area_of_interest:
          description: |-
            Volume of airspace to search for operational intents.
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
        resource_ids:
          description: List of resources for which to return operational intents using the resource. 
          type: array
          items:
            $ref: '#/components/schemas/EntityID'
        time_start:
          description: Start time of the information query. If start time is not specified, it will default to the time the request is processed. 
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: End tme of the information query. If end time is not specified, the value will be chosen automatically by the DSS. 
            The end time may not be in the past.
          anyOf:
          - $ref: '#/components/schemas/Time'
      description: Parameters for a request to find OperationalIntentReferences matching the provided criteria.  This can be queried by volume and/or
        by the ids of the resources of interest. 
    QueryOperationalIntentReferenceResponse:
      required:
      - operational_intent_references
      type: object
      properties:
        operational_intent_references:
          type: array
          description: OperationalIntentReferences in the area of interest.
          items:
            $ref: '#/components/schemas/OperationalIntentReference'
          default: []
      description: Response to DSS query for OperationalIntentReferences in an area of interest.
    ResourceReference:
      required:
      - id
      - manager
      - time_start
      - ris_availability
      - ris_base_url
      - version
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        manager:
          type: string
          description: Created by the DSS based on creating client's ID (via access token).  Used internal to the DSS for restricting mutation and deletion operations to manager.  Used by USS to reject resource update notifications originating from a USS that does not manage the resource.
          example: uss1
        ris_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          description: "Numeric version of this constraint which increments upon each change in the resource, regardless of whether any field of the resource reference changes.  A USS with the details of this resource when it was at a particular version does not need to retrieve the details again until the version changes."
          format: int32
          example: 1
        ovn:
          description: "Opaque version number of this resource.  Populated only when the ResourceReference is managed by the USS retrieving or providing it.  Not populated when the ResourceReference is not managed by the USS retrieving or providing it (instead, the USS must obtain the OVN from the details retrieved from the managing USS)."
          anyOf:  
          - $ref: '#/components/schemas/EntityOVN'
        # Start/end time for resource
        time_start:
          description: "Date/time when the resource should begin being considered for DCB."
          $ref: '#/components/schemas/Time'
        time_end:
          description: "Ending time of the Resource, if applicable. Indefinite if not set."
          $ref: '#/components/schemas/Time'
        ris_base_url:
          $ref: '#/components/schemas/ResourceUssBaseURL'
      description: "A ResourceReference (area in which a resource is present, along with other high-level information, but no details).  The DSS reports only these references and clients must exchange details and additional information peer-to-peer."
    ResourceUssBaseURL:
      description: The base URL of a USS implementation that implements the parts of the USS-USS API necessary for providing the details of this constraint.
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'
    PostResourceReferenceParameters:
      required:
      - extents
      - ris_base_url
      - time_start
      type: object
      properties:
        extents:
          minItems: 1
          type: array
          description: |-
            Spacetime extents that bound this resource.
            The end time may not be in the past.
            All volumes of the resource must be encompassed in these extents. However, these extents do not need to match the precise volumes of the resource; a single bounding extent may be provided instead, for instance.
          items:
            $ref: '#/components/schemas/Volume4D'
        ris_base_url:
          $ref: '#/components/schemas/ResourceUssBaseURL'
        subscription_id:
          description: "The ID of an existing subscription that the USS will use to keep the operator informed about updates to relevant airspace information. If this field is not provided when the operational intent is in the Activated, Nonconforming, or Contingent state, then the `new_subscription` field must be provided in order to provide notification capability for the operational intent.  The subscription specified by this ID must cover at least the area over which this operational intent is conducted, and it must provide notifications for operational intents."
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        new_subscription:
          description: "If an existing subscription is not specified in `subscription_id`, and the operational intent is in the Activated, Nonconforming, or Contingent state, then this field must be populated.  When this field is populated, an implicit subscription will be created and associated with this operational intent, and will generally be deleted automatically upon the deletion of this operational intent."
          anyOf:
          - $ref: '#/components/schemas/ImplicitSubscriptionParameters'
        time_start:
          description: "Date/time when the resource should begin being considered for DCB."
          $ref: '#/components/schemas/Time'
        time_end:
          description: "Ending time of the Resource, if applicable. Indefinite if not set."
          $ref: '#/components/schemas/Time'
      description: Parameters for a request to create a ResourceReference in the DSS.
    PutResourceReferenceParameters:
      type: object
      properties:
        extents:
          minItems: 1
          type: array
          description: |-
            Spacetime extents that bound this resource.
            The end time may not be in the past.
            All volumes of the resource must be encompassed in these extents. However, these extents do not need to match the precise volumes of the resource; a single bounding extent may be provided instead, for instance.
          items:
            $ref: '#/components/schemas/Volume4D'
        ris_base_url:
          $ref: '#/components/schemas/ResourceUssBaseURL'
        subscription_id:
          description: "The ID of an existing subscription that the USS will use to keep the operator informed about updates to relevant airspace information. If this field is not provided when the operational intent is in the Activated, Nonconforming, or Contingent state, then the `new_subscription` field must be provided in order to provide notification capability for the operational intent.  The subscription specified by this ID must cover at least the area over which this operational intent is conducted, and it must provide notifications for operational intents."
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        new_subscription:
          description: "If an existing subscription is not specified in `subscription_id`, and the operational intent is in the Activated, Nonconforming, or Contingent state, then this field must be populated.  When this field is populated, an implicit subscription will be created and associated with this operational intent, and will generally be deleted automatically upon the deletion of this operational intent."
          anyOf:
          - $ref: '#/components/schemas/ImplicitSubscriptionParameters'
        time_start:
          description: "Date/time when the resource should begin being considered for DCB."
          $ref: '#/components/schemas/Time'
        time_end:
          description: "Ending time of the Resource, if applicable. Indefinite if not set."
          $ref: '#/components/schemas/Time'
        update_type:
          type: string
          description: The change that warrants notification of peers for the resource. 
          enum:
          - CAPACITY
          - STATUS
          - DEFINITION 
      description: Parameters for a request to update an existing ResourceReference in the DSS.
    GetResourceReferenceResponse:
      required:
      - resource_reference
      type: object
      properties:
        resource_reference:
          $ref: '#/components/schemas/ResourceReference'
      description: Response to DSS request for the ResourceReference with the given ID.
    ChangeResourceReferenceResponse:
      required:
      - resource_reference
      - subscribers
      type: object
      properties:
        subscribers:
          type: array
          description: DSS subscribers that this client now has the obligation to notify of the resource changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/resources` path API.  The client's own subscriptions will also be included in this list.
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        resource_reference:
          $ref: '#/components/schemas/ResourceReference'
      description: "Response to a request to create, update, or delete a ResourceReference. in the DSS."
    QueryResourceReferenceParameters:
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'
      description: Parameters for a request to find ResourceReferences matching the provided criteria.
    QueryResourceReferencesResponse:
      required:
      - resource_references
      type: object
      properties:
        resource_references:
          type: array
          description: ResourceReferences in the area of interest.
          items:
            $ref: '#/components/schemas/ResourceReference'
          default: []
      description: Response to DSS query for ResourceReferences in an area of interest.
    ConstraintReference:
      required:
      - id
      - manager
      - time_end
      - time_start
      - uss_availability
      - uss_base_url
      - version
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        manager:
          type: string
          description: Created by the DSS based on creating client's ID (via access token).  Used internal to the DSS for restricting mutation and deletion operations to manager.  Used by USSs to reject constraint update notifications originating from a USS that does not manage the constraint.
          example: uss1
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          description: "Numeric version of this constraint which increments upon each change in the constraint, regardless of whether any field of the constraint reference changes.  A USS with the details of this constraint when it was at a particular version does not need to retrieve the details again until the version changes."
          format: int32
          example: 1
        ovn:
          description: "Opaque version number of this constraint.  Populated only when the ConstraintReference is managed by the USS retrieving or providing it.  Not populated when the ConstraintReference is not managed by the USS retrieving or providing it (instead, the USS must obtain the OVN from the details retrieved from the managing USS)."
          anyOf:
          - $ref: '#/components/schemas/EntityOVN'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'
      description: "A ConstraintReference (area in which a constraint is present, along with other high-level information, but no details).  The DSS reports only these references and clients must exchange details and additional information peer-to-peer."
    ConstraintUssBaseURL:
      description: The base URL of a USS implementation that implements the parts of the USS-USS API necessary for providing the details of this constraint.
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'
    PutConstraintReferenceParameters:
      required:
      - extents
      - uss_base_url
      type: object
      properties:
        extents:
          minItems: 1
          type: array
          description: |-
            Spacetime extents that bound this constraint.
            The end time may not be in the past.
            All volumes of the constraint must be encompassed in these extents. However, these extents do not need to match the precise volumes of the constraint; a single bounding extent may be provided instead, for instance.
          items:
            $ref: '#/components/schemas/Volume4D'
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'
      description: Parameters for a request to create/update a ConstraintReference in the DSS.
    GetConstraintReferenceResponse:
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'
      description: Response to DSS request for the ConstraintReference with the given ID.
    ChangeConstraintReferenceResponse:
      required:
      - constraint_reference
      - subscribers
      type: object
      properties:
        subscribers:
          type: array
          description: DSS subscribers that this client now has the obligation to notify of the constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/constraints` path API.  The client's own subscriptions will also be included in this list.
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'
      description: "Response to a request to create, update, or delete a ConstraintReference. in the DSS."
    QueryConstraintReferenceParameters:
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'
      description: Parameters for a request to find ConstraintReferences matching the provided criteria.
    QueryConstraintReferencesResponse:
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          type: array
          description: ConstraintReferences in the area of interest.
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []
      description: Response to DSS query for ConstraintReferences in an area of interest.
    AirspaceConflictResponse:
      type: object
      properties:
        message:
          type: string
          description: Human-readable message indicating what error occurred and/or why.
        missing_operational_intents:
          type: array
          description: "List of operational intent references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these operational intents to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call."
          items:
            $ref: '#/components/schemas/OperationalIntentReference'
          default: []
        missing_constraints:
          type: array
          description: "List of constraint references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these constraints to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call."
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []
      description: Data provided when an airspace conflict was encountered.
    VolumeExtents:
      required:
        - extents
      type: object
      properties: 
        extents:
          minItems: 1
          type: array
          description: |-
            Spacetime extents that bound this operational intent. All volumes, both nominal and off-nominal, 
            must be encompassed in these extents. However, these extents do not need to match the precise 
            volumes of the operational intent; a single bounding extent may be provided instead, for instance.
            Start and end times, as well as lower and upper altitudes, are required for each volume.
            The end time may not be in the past. Each VolumeExtent includes a list of resources which will 
            be fully occupied for the time duration of the volume. Each VolumeExtent also includes a list of 
            resources which will not be occupied by the operation.  This list is included because the extents 
            of the operations and resources will not perfectly match the actual geography exactly and overlaps 
            of extents without actual resource usage could occur. 
          items:
            $ref: '#/components/schemas/Volume4DExtent'
    OffNominalVolumeExtents:
      required:
        - extents
      type: object
      properties: 
        extents:
          minItems: 1
          type: array
          description: |-
            Spacetime extents that bound this operational intent. All volumes, both nominal and off-nominal, 
            must be encompassed in these extents. However, these extents do not need to match the precise 
            volumes of the operational intent; a single bounding extent may be provided instead, for instance.
            Start and end times, as well as lower and upper altitudes, are required for each volume.
            The end time may not be in the past. 
          items:
            $ref: '#/components/schemas/Volume4D'
    ResourceCrossing:
      required:
       - crossing_time
      type: object
      properties:
        crossing_time:
          $ref: "#/components/schemas/Time"
    ResourceOccupationDuration:
      required:
       - entry_time
       - exit_time
      type: object
      properties:
        entry_time:
          $ref: "#/components/schemas/Time"
        exit_time:
          $ref: "#/components/schemas/Time"
    ResourceExtent:
      required:
        - resource_id
        - resource_usage
        - resource_ovn
        - operation_ovns
      type: object
      properties:
        resource_usage:
          description: |-
            Duration of time for a volume based resource, or crossing Time
            for a waypoint based resource. 
          anyOf:
            - $ref: "#/components/schemas/ResourceCrossing"
            - $ref: "#/components/schemas/ResourceOccupationDuration"  
        resource_id:
          description: |-
            The ID of a resources being occupied or crossed by the operational intent. 
            Details of the crossing times and durations are also shared peer-to-peer when the
            operational intent trajectory is shared. 
          $ref: '#/components/schemas/EntityID'
        resource_ovn:
          description: |-
            The OVN of the resource being occupied or crossed by the operational intent. 
            This proves the operation considers the latest status and capacity of the resource. 
          $ref: '#/components/schemas/EntityOVN'
        operation_ovns:
          description: |-
            The OVNs of all operations contributing to demand at this resource during the
            relevant times based upon resource demand & capacity requirements. 
          type: array
          items:
            $ref: '#/components/schemas/EntityOVN'
    ResourceExtents:
      required:
        - extents
      type: object
      properties: 
        extents:
          minItems: 1
          type: array
          description: |-
            List of resources and crossing OR entry/exit times when the resource
            will be occupied by the Flight Intent. 
          items:
            $ref: '#/components/schemas/ResourceExtent'
    OperationalExtents:
      type: object
      required:
        - extents
      properties:
        extents:
          anyOf:
          - $ref: "#/components/schemas/ResourceExtents"
          - $ref: "#/components/schemas/VolumeExtents"
          - $ref: "#/components/schemas/OffNominalVolumeExtents"
    ConstraintDetails:
      required:
      - volumes
      type: object
      properties:
        volumes:
          minItems: 1
          type: array
          description: |-
            Volumes that wholly contain the constraint while being as small as practical.
            The end time may not be in the past.
          items:
            $ref: '#/components/schemas/Volume4D'
        type:
          type: string
          description: Type of airspace feature this constraint represents.
          example: com.example.non_utm_aircraft_operations
        geozone:
          description: "If this constraint is an ED-269 compliant geo zone, the details about that geo zone."
          anyOf:
          - $ref: '#/components/schemas/GeoZone'
      description: Details of a UTM constraint. Note that this data is not stored in the DSS; only with the clients.
    Constraint:
      required:
      - details
      - reference
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'
      description: Full specification of a UTM constraint.
    PutConstraintDetailsParameters:
      required:
      - constraint_id
      - subscriptions
      type: object
      properties:
        constraint_id:
          description: ID of constraint that has changed.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        constraint:
          description: "Full information about the constraint that has changed.  If this field is omitted, the constraint was deleted.  The `ovn` field in the nested `reference` must be populated."
          anyOf:
          - $ref: '#/components/schemas/Constraint'
        subscriptions:
          minItems: 1
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'
      description: "Parameters of a message informing of new full information for a constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription."
    GetConstraintDetailsResponse:
      required:
      - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
      description: Response to peer request for the details of operational intent with the given ID.
    GetOperationalIntentTelemetryResponse:
      required:
      - operational_intent_id
      type: object
      properties:
        operational_intent_id:
          description: ID of the operational intent which the vehicle reporting telemetry is flying.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'
        next_telemetry_opportunity:
          description: "The next telemetry similar to this telemetry is not expected to be available until at or after this time, so the polling USS should generally not poll the endpoint providing this response data again until at or after that time.  If this field is omitted, then there is no current expectation of new telemetry becoming available."
          anyOf:
          - $ref: '#/components/schemas/Time'
      description: Response to a peer request for telemetry of an off-nominal operational intent.
    VehicleTelemetry:
      required:
      - time_measured
      type: object
      properties:
        time_measured:
          $ref: '#/components/schemas/Time'
        position:
          $ref: '#/components/schemas/Position'
        velocity:
          $ref: '#/components/schemas/Velocity'
      description: "Vehicle position, altitude, and velocity."
    PositionAccuracyVertical:
      type: string
      description: "Vertical error that is likely to be present in this reported position. This is the GVA enumeration from ADS-B, plus some finer values for UAS."
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m
    PositionAccuracyHorizontal:
      type: string
      description: "Horizontal error that is likely to be present in this reported position. This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAS."
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m
    Position:
      type: object
      properties:
        longitude:
          $ref: '#/components/schemas/Longitude'
        latitude:
          $ref: '#/components/schemas/Latitude'
        accuracy_h:
          $ref: '#/components/schemas/PositionAccuracyHorizontal'
        accuracy_v:
          $ref: '#/components/schemas/PositionAccuracyVertical'
        extrapolated:
          type: boolean
          description: True if this position was generated primarily by computation rather than primarily from a direct instrument measurement.
          default: false
        altitude:
          $ref: '#/components/schemas/Altitude'
      description: "Location of the vehicle (UAS) as reported for UTM. Note: 'accuracy' values are required when extrapolated field is true."
    Velocity:
      required:
      - speed
      - units_speed
      type: object
      properties:
        speed:
          type: number
          description: Ground speed in meters/second.
          format: float
          example: 200.1
        units_speed:
          type: string
          enum:
          - MetersPerSecond
        track:
          type: number
          description: "Direction of flight expressed as a \"True North-based\" ground track angle. This value is provided in degrees East of North with a minimum resolution of 1 degree. A value of 360 indicates invalid, no value, or unknown."
          format: float
          example: 120
          default: 0
    UssAvailabilityStatus:
      required:
      - availability
      - uss
      type: object
      properties:
        uss:
          type: string
          description: Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
        availability:
          $ref: '#/components/schemas/UssAvailabilityState'
    UssAvailabilityState:
      type: string
      description: |-
        A USS is presumed to be in the Unknown state absent indication otherwise by a USS with availability arbitration scope.  Upon determination via availability arbitration, a USS is Down when it does not respond appropriately, and a Down USS may not perform the following operations in the DSS:
        * Create an operational intent in the Accepted or Activated states
        * Modify an operational intent whose new or unchanged state is Accepted or Activated
        * Delete an operational intent
        A USS in the Unknown state possesses all the capabilities, within the DSS, of a USS in the Normal state.
      enum:
      - Unknown
      - Normal
      - Down
    SetUssAvailabilityStatusParameters:
      required:
      - availability
      - old_version
      type: object
      properties:
        old_version:
          type: string
          description: "Version of USS's availability to change, for consistent read-modify-write operations and consistent retry behavior."
          default: ""
        availability:
          $ref: '#/components/schemas/UssAvailabilityState'
    UssAvailabilityStatusResponse:
      required:
      - status
      - version
      type: object
      properties:
        version:
          type: string
          description: Current version of USS's availability.  Used to change USS's availability.
        status:
          $ref: '#/components/schemas/UssAvailabilityStatus'
    ChangeUssAvailabilityStatusResponse:
      required:
      - status
      - version
      - subscribers
      type: object
      properties:
        version:
          type: string
          description: Current version of USS's availability.  Used to change USS's availability.
        status:
          $ref: '#/components/schemas/UssAvailabilityStatus'
        subscribers:
          type: array
          description: |-
            DSS subscribers that this client now has the obligation to notify of the USS status changes just made.  
            This client must call POST for each provided URL according to the USS-USS `/oim/v1/uss_availability` path API.  
            The client's own subscriptions will also be included in this list.
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
    USSLogSet:
      type: object
      properties:
        messages:
          type: array
          description: "Outgoing messages sent to other USSs and the DSS, and incoming messages received from other USSs, including instances where an expected response to a request is not received."
          items:
            $ref: '#/components/schemas/ExchangeRecord'
          default: []
        operator_notifications:
          type: array
          description: Instances of operator notifications as specifically required within this standard.
          items:
            $ref: '#/components/schemas/UserNotificationRecord'
          default: []
        operator_inputs:
          type: array
          description: Instances of operator input as specifically required within this standard.
          items:
            $ref: '#/components/schemas/UserInputRecord'
          default: []
        operator_associations:
          type: array
          description: "For a USS that manages operational intents, associations of an operator with operational intents that transitioned to the Accepted state."
          items:
            $ref: '#/components/schemas/OperatorAssociation'
          default: []
        planning_attempts:
          type: array
          description: "For a USS that manages operational intents, instances where an operational intent could not be planned or replanned due to conflicts with other operational intents or constraints."
          items:
            $ref: '#/components/schemas/PlanningRecord'
          default: []
        operational_intent_positions:
          type: array
          description: "For a USS performing conformance monitoring, all position data used for conformance monitoring that is ingested from the UA."
          items:
            $ref: '#/components/schemas/OperationalIntentPositions'
          default: []
        constraint_provider_associations:
          type: array
          description: "For a USS that performs constraint management, associations of an authorized constraint provider with all constraints that transition to the valid state."
          items:
            $ref: '#/components/schemas/ConstraintProviderAssociation'
          default: []
      description: The set of log data fulfilling this standard's Logging requirements.
    ExchangeRecord:
      required:
      - method
      - recorder_role
      - request_source
      - request_time
      - url
      type: object
      properties:
        url:
          type: string
          description: Full URL of request.
        method:
          type: string
          description: "HTTP verb used by requestor (e.g., \"PUT,\" \"GET,\" etc.)"
        headers:
          type: array
          description: Set of headers associated with request or response. Requires 'Authorization:' field (at a minimum)
          items:
            type: string
          default: []
        recorder_role:
          type: string
          description: "A coded value that indicates the role of the logging USS: 'Client' (initiating a request to a remote USS) or 'Server' (handling a request from a remote USS)"
          enum:
          - Client
          - Server
        request_time:
          description: The time at which the request was sent/received.
          anyOf:
          - $ref: '#/components/schemas/Time'
        request_body:
          type: string
          description: Base64-encoded body content sent/received as a request.
          default: ""
        response_time:
          description: The time at which the response was sent/received.
          anyOf:
          - $ref: '#/components/schemas/Time'
        response_body:
          type: string
          description: Base64-encoded body content sent/received in response to request.
          default: ""
        response_code:
          type: integer
          description: HTTP response code sent/received in response to request.
          format: int32
          default: 0
        problem:
          type: string
          description: "'Human-readable description of the problem with the exchange, if any.'"
      description: Details of a request/response data exchange.
    ErrorReport:
      required:
      - exchange
      type: object
      properties:
        report_id:
          maxLength: 128
          type: string
          description: ID assigned by the server receiving the report.  Not populated when submitting a report.
        exchange:
          description: The request (by this USS) and response associated with the error.
          anyOf:
          - $ref: '#/components/schemas/ExchangeRecord'
      description: A report informing a server of a communication problem.
    PositionRecord:
      required:
      - telemetry
      - time_received
      type: object
      properties:
        time_received:
          description: Time that this position data was received by the USS
          anyOf:
          - $ref: '#/components/schemas/Time'
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'
      description: A record of vehicle telemetry information received by this USS (typically for conformance monitoring).
    OperationalIntentPositions:
      required:
      - operational_intent_id
      type: object
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/PositionRecord'
          default: []
        operational_intent_id:
          description: ID of the operational intent associated with `positions`
          anyOf:
          - $ref: '#/components/schemas/EntityID'
      description: A record of position data gathered through the course of an operational intent
    PlanningRecord:
      required:
      - ovns
      - time
      type: object
      properties:
        time:
          description: Time that this planning event occurred
          anyOf:
          - $ref: '#/components/schemas/Time'
        ovns:
          type: array
          description: OVNs the planning USS was aware of when it was planning the operational intent
          items:
            $ref: '#/components/schemas/EntityOVN'
          default: []
        missing_operational_intents:
          type: array
          description: List of missing operational intents (for planning attempts that were denied by the DSS with code 409)
          items:
            $ref: '#/components/schemas/EntityID'
          default: []
        missing_constraints:
          type: array
          description: List of missing constraints (for planning attempts that were denied by the DSS with code 409)
          items:
            $ref: '#/components/schemas/EntityID'
          default: []
        operational_intent_id:
          description: ID of the operational intent being planned
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        problem:
          type: string
          description: A free text description of the problem(s) encountered during this planning attempt.
      description: A record of a single attempt to (successfully or unsuccessfully) create or modify an operational intent.
    UserNotificationRecord:
      required:
      - notification_time
      - notification_triggering_event
      - triggering_event_time
      type: object
      properties:
        triggering_event_time:
          description: Time of the notification triggering event
          anyOf:
          - $ref: '#/components/schemas/Time'
        notification_time:
          description: Time at which the user was notified
          anyOf:
          - $ref: '#/components/schemas/Time'
        notification_details:
          type: string
          description: "Description of information that was provided to the user, as per the referenced notification_triggering_event requirement"
        notification_triggering_event:
          type: string
          description: Requirement ID that pertains to the given notification
          enum:
          - GEN0400
          - GEN0405
          - SCD0090
          - SCD0095
          - ACM0010
          - CMSA0115
          - CMSA0300
          - CSTP0005
          - CSTP0010
          - CSTP0020
          - CSTP0025
          - CSTP0030
          - CSTO0035
      description: User notification record.
    UserInputRecord:
      required:
      - input_triggering_event
      - operational_intent_id
      - triggering_event_time
      type: object
      properties:
        triggering_event_time:
          description: Time in which user input was received by the USS
          anyOf:
          - $ref: '#/components/schemas/Time'
        operational_intent_id:
          description: ID of the operational_intent ID pertaining to the user input
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        input_triggering_event:
          type: string
          description: Requirement ID that pertains to the given notification
          enum:
          - OPIN0040
          - CMSA0010
          - CMSA0025
          - CMSA0100
          - CMSA0105
          - CMSA0110
          - CMSA0200
          - CMSA0205
          - CMSA0210
          - CMSA0215
        input_details:
          type: string
          description: "Description of the information that was provided by the user, as per the referenced input_triggering_event requirement"
      description: User input record
    OperatorAssociation:
      required:
      - operational_intent_id
      - operator_id
      type: object
      properties:
        operational_intent_id:
          description: ID of operational intent to which this association pertains
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        operator_id:
          type: string
          description: Unique identifier of the operator responsible for the operational intent
      description: Association between an operational intent and the operator of that operational intent
    ConstraintProviderAssociation:
      required:
      - constraint_id
      - constraint_provider_id
      type: object
      properties:
        constraint_id:
          description: ID of constraint to which this association pertains
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        constraint_provider_id:
          type: string
          description: Unique identifier of the constraint provider responsible for the constraint
      description: Association between a constraint and the constraint provider responsible for that constraint
    GeoZone:
      required:
      - country
      - identifier
      - restriction
      - type
      - zone_authority
      type: object
      properties:
        identifier:
          description: |-
            A string of characters that uniquely identifies the UAS Zone within the State/Territory identified by the country attribute.
            Note - The UAS Zone is uniquely identified worldwide by the combination of the country and the identifier attributes
          anyOf:
          - $ref: '#/components/schemas/CodeZoneIdentifierType'
        country:
          description: |-
            The State that has the authority to declare the zone.
            Note - There will be no Zone belonging to two States. Not necessary to code the information that two zones are "in neighboring States" or "related".
          anyOf:
          - $ref: '#/components/schemas/CodeCountryISOType'
        zone_authority:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Authority'
        name:
          description: A free text name by which the zone may be known by the public or by the UAS community.
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        type:
          description: "An indication whether the Zone is provided with its common definition or with a customised definition, for a particular user."
          anyOf:
          - $ref: '#/components/schemas/CodeZoneType'
        restriction:
          description: "An indication if flying in the zone is conditional, forbidden or unrestricted."
          anyOf:
          - $ref: '#/components/schemas/CodeRestrictionType'
        restriction_conditions:
          type: array
          description: An indication of the conditions under which the zone can be used
          items:
            $ref: '#/components/schemas/ConditionExpressionType'
        region:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Where applicable, identifies a region inside a State where the UAS Zone is located.
            Note 1) identified with a digit between 0-65535 (16 bit), corresponding to a list of regions pre-defined for each State.
            Note 2) this attribute is intended to facilitate extracting sub-sets of data, for specific regions
          format: int32
        reason:
          maxItems: 9
          type: array
          description: A coded indication for the reason that led to the establishment of the zone.
          items:
            $ref: '#/components/schemas/CodeZoneReasonType'
        other_reason_info:
          maxLength: 30
          type: string
          description: "A free text description of the reason that led to the establishment of the zone, when not covered by a pre-defined coded value."
        regulation_exemption:
          description: This is an extension point. It allows adding additional attributes of national interest through this element.
          anyOf:
          - $ref: '#/components/schemas/CodeYesNoType'
        u_space_class:
          description: |-
            A code that identifies the category or class of the zone applying a "USpace concept".
            Note: Two (draft) classifications exist, one from Eurocontrol and one from CORUS. Therefore, two instances of this attribute are expected, one from each sub-list. This might be later replaced with separate attributes and separate lists of values.
          anyOf:
          - $ref: '#/components/schemas/CodeUSpaceClassType'
        message:
          description: "A message to be displayed to the user of the zone, typically on the RPS for the Remote Pilot, to make him/her aware about specific information associated with the zone (typically when it is not only a restriction to fly in the zone, thus not only an alert or an automatic limitation, for example : “image capture prohibited in this zone”, “frequent strong winds in this zone”, “no landing or take-off in this zone”). This message is also used to indicate exemptions from regulation in a zone (see below). Several information can be grouped in a message, separated by a “/”."
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        additional_properties:
          type: object
          description: "Indicates that exemptions from the national or European regulations are allowed in the UAS Zone, that will be detailed via the \"message\" property."
      description: "An airspace of defined dimensions, above the land areas or territorial waters of a State, within which a particular restriction or condition for UAS flights applies."
    CodeZoneIdentifierType:
      maxLength: 7
      type: string
      description: |-
        a string of maximum 7 characters that uniquely identifies the area within a geographical scope.
        NOTE (1): This shall not include the country identifier, which is a separate attribute of the UAS Zone.
        NOTE (2): The length of this data type is limited to 7 characters for compatibility with ARINC 424 and AIXM, where an airspace designator may have maximum 10 characters. The 10 characters are the result of concatenating the UAS Zone attributes for country and identifier.
    CodeCountryISOType:
      maxLength: 3
      minLength: 3
      type: string
      description: |-
        A 3 letter identifier of a country or territory using the ISO 3166-1 alpha-3 standard.
        NOTE: >-
           The ISO 3-letter country codes come with the following advantages:
              - allow to distinguish between remote territories and mainland
              - are unique, unlike the ICAO Country codes where the same State
                could have two or more codes
              - are also used in military standards, such as NATO STANAG 1059
                INT, which come with well document additions that might be also
                useful for UAS areas.
    CodeZoneType:
      type: string
      description: A coded list of values which allows indicating that the definition of a UAS Zone is specifically customised for a particular UAS or operator.
      enum:
      - COMMON
      - CUSTOMIZED
      - PROHIBITED
      - REQ_AUTHORISATION
      - CONDITIONAL
      - NO_RESTRICTION
    ConditionExpressionType:
      maxLength: 10000
      type: string
      description: |-
        A coded expression that provides information about what is authorised / forbidden in a zone that has conditional access.
        By difference with the “Message” field per zone, this coded expression is made to be interopreted by the UAS while the “Message” is to interpreted by the remote pilot.
        NOTE: the maximum field length is 10 000 characters.
        ---------------------- Condition definition language ---------------- • A list of relevant characteristics (CHARTYPE) has first to be established per state, and their finite list of acceptable values (CHARVAL)
        • Each chartype and charval fields are defined by a limited set of characters
        • A public document shall give the definitions of each, and provide the reference to legal or technical characteristics implied
        • The Geozone editor per state can use these characteristics, with the dedicated condition language defined below, to define exact conditions per zone
        • Each UAS Geofencing function shall be loaded with the corresponding chararacteristic status of the UAS for the intended flight, so as to be able to apply the conditions , either to generate alerts or to limit the flight
        • If the value of a given characteristic of the condition equation is not defined in the UAS, the UAS Geofencing function should inform the pilot in Geoawareness alerting or consider that the zone is forbidden, by default in automatic Geofencing.
        A conditional expression shall be of the following type:
        • The UAS is PERMITTED XOR PROHIBITED (exclusive choice) to fly in this zone at this time IF (Characteristic1) CHARTYPE1 = (Value1) CHARVAL1 AND
        CHARTYPE 2 = CHARVAL 2 AND ... AND End IF
        OR (...)
        ...
        End OR
        • Only the fields in bold need to be edited in the character string, separated by”/”. Others are implicit.
        Examples of CHARTYPE and CHARVALUE:
        • CHARTYPE: operator type; Acceptable CHARVAL values: Military/Police/Firefighting
        • CHARTYPE: Operator ID (registration number); Acceptable CHARVAL values: as per registration format
        • CHARTYPE: Operation type: A1 as per EASA Open Types or S1 (National standard Scenario 1), STS01 (EASA Specific standard scenario) or ...
        • CHARTYPE: UTM operation type: Planned/Unplanned,
        • CHARTYPE: passengers on board: yes /no Note that it is possible in each national catalog of chartype and charval items, to define complex categories of operation/drone /equipment. Example: In nation A, we may have a type “drone level” with values Low, Medium, High. Each level corresponds to a defined set of required UAS performance/operation features/ operator qualification etc. This avoids to code a complex combination in the geozone database. This conditional expression can also be used to code a prohibition of image capture in a zone.
        Example: PERMITTED/IMAGE CAPTURE=NO/NOISE

          CLASS=A/OR/OPERATOR=POLICE

        Meaning: >-
           the fight is permitted in this zone at that time if No image is
        captured (removed or deactivated) and if noise class = class A (following a known classification) or if the UAS operator is the Police
    CodeRestrictionType:
      type: string
      description: "An indication if flying in the zone is conditional, forbidden or unrestricted."
    CodeZoneReasonType:
      type: string
      description: A coded indication of a reason that justifies the existence of an UAS Zone
      enum:
      - AIR_TRAFFIC
      - SENSITIVE
      - PRIVACY
      - POPULATION
      - NATURE
      - NOISE
      - FOREIGN_TERRITORY
      - EMERGENCY
      - OTHER
    CodeUSpaceClassType:
      maxLength: 100
      type: string
      description: |-
        A coded identifier for a category or class of the zone applying a "USpace concept".
        NOTE: >-
           In the current model version, there is no specific list of values.
        For example, the “X”, “Y”, “Z” types of zones as per SESAR JU Corus project on USpace concept of operation could be used in a future version. Until a precise list of values is defined, this data type will be considered as string of characters of maximum 100 characters.
    CodeYesNoType:
      type: string
      description: A coded value that indicates a choice between a positive (yes) or a negative (no) applicability.
      enum:
      - "true"
      - "false"
    Authority:
      type: object
      properties:
        name:
          description: The official name of a public or private authority
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        service:
          description: The name of a specific department or service within the organisation
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        contact_name:
          description: The name or role of a specific person that needs to be contacted within the organisation
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        site_url:
          description: |-
            The URL of the public internet site through which the organisation may be contacted
            Note: in the data coding format, this might be further constrained in order to ensure a valid URL format.
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        email:
          description: |-
            The e-mail address by which the organisation may be contacted.
            Note: in the data coding format, this might be further constrained in order to ensure a valid e-mail format.
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        phone:
          description: A phone number at which the organisation may be contacted
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
        purpose:
          description: The role of the Authority in relation with the zone.
          anyOf:
          - $ref: '#/components/schemas/CodeAuthorityRole'
        interval_before:
          type: string
          description: "The minimal time interval required between notification or authorization request and starting to operate in the zone, in the format PnnDTnnHnnM (ISO 8601)."
          format: duration
      description: |-
        A relevant authority that is in charge for authorising, being notified or providing information for UAS operations in the UAS zone.
        Rule: >-
           at least one of the following shall be specified - siteURL, email,
        phone.
    CodeAuthorityRole:
      type: string
      description: A coded list of values indicating the role that an authority has in relation with the UAS zone.
      enum:
      - AUTHORIZATION
      - NOTIFICATION
      - INFORMATION
    TextShortType:
      maxLength: 200
      type: string
      description: A free text with a maximum length of 200 characters
  securitySchemes:
    Authority:
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority will issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, publish to all providers the public key for verifying that signature, and implement standard OAuth server discovery mechanisms as described in RFC 8414.
        The following fields must be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with a string composed of a space-separated list of strings indicating the scopes granted, per RFC 6749.
        * `jti`, according to RFC 7519.
        Following the principle of least privilege, only one of the scopes enumerated in this document should be granted in a single token (though other scopes may accompany it).  The tokens granted by this authority must protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).
        When using the `aud` claim to protect against the reuse of received tokens, and absent guidance on behalf of the competent authority to the contrary, the JWT `aud` claim requested by the client must be included in each access token and must contain the fully qualified domain name of the URL the access token will be used to access.  For example, if a USS were querying the endpoint at https://dss.example.com:8888/rid/v2/dss/identification_service_areas, the access token included in the request should specify `"aud": "dss.example.com"`.
        Clients must provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
      flows:
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            utm.strategic_coordination: Client may perform actions encompassed by the strategic coordination role including strategic conflict detection.
            utm.constraint_management: "Client may manage (create, edit, and delete) constraints according to the constraint management role."
            utm.constraint_processing: Client may read constraint references from the DSS and details from the partner USSs according to the constraint processing role.
            utm.conformance_monitoring_sa: Client may perform actions encompassed by the conformance monitoring for situational awareness role.
            utm.availability_arbitration: Client may set the availability state of USSs in the DSS.
