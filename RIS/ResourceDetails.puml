@startuml

class ResourceReference {
    id: EntityID
    manager: string
    version: integer
    ovn: EntityOVN
    subscription_id: SubscriptionID
    definition_url: string
    capacity_url: string
    status_url: string
}
note "RIS definition, capacity, and status URLs separate if data may come from different services. \nOtherwise, could provide a base URL and use paths for details. " as n_ussbaseurl
n_ussbaseurl -- ResourceReference

class ResourceDetails {
    * reference: ResourceReference
    * definition: ResourceDefinition
    * capacity: ResourceCapacity
    * status: ResourceStatus
}
enum CapacityLimitType {
    RATE_BASED
    INSTANTANEOUS
}
enum DurationUnits {
    SECONDS
    MINUTES
    HOURS
}
enum ResourceType {
    Rate-based types:
    ENTRY_POINT
    EXIT_POINT
    INTERSECTION
    MERGE_POINT
    ARRIVAL_FIX
    DEPARTURE_FIX
    --
    Instantaneous-based types:
    CORRIDOR
    AIRSPACE_CLASS
    UAM_AIRSPACE
    FATO (arrival & departure regions)
    --
    Both:
    VERTIPORT
    ==
    WAYPOINT
}

class Time {
    * value: string
    * format: string
}

class ResourceCapacity {
    * default: DefaultResourceCapacity
    future: List[TemporaryResourceCapacity]
}

class DefaultResourceCapacity {
    * type: CapacityLimitType
    * limit: integer
    per_duration: int
    duration_unit: DurationUnits
}

class ActiveResourceCapacity {
    * type: CapacityLimitType
    * limit: integer
    per_duration: int
    duration_unit: DurationUnits
    end: Time
}

class TemporaryResourceCapacity {
    * type: CapacityLimitType
    * limit: integer
    per_duration: int
    duration_unit: DurationUnits
    start: Time
    end: Time
}

enum ResourceStatusType {
    ACTIVE
    INACTIVE
}
class ResourceStatus {
    * status: ResourceStatusType
    * current: ActiveResourceCapacity
}

enum ResourceShape {
    BOUNDING_CIRCLE
    POINT
    POLYGON
}

class LatLngPoint {
    lng: Longitude
    lat: Latitude
}
class Circle {
    * center: LatLngPoint
    * radius: Radius
}
class Radius {
    value: float
    units: string (only M meters acceptable for UAM)
}

class ResourceDefinition {
    * name: string
    * shape: ResourceShape
    point: LatLngPoint
    bounding_circle: Circle
    coordinates: List[LatLngPoint]
}
note "One of point, bounding_circle\nor coordinates is required." as N_SHAPE
N_SHAPE -- ResourceDefinition

note "Limit defines numerical limit.\nIf capacity is RATE_BASED,\nper_duration and duration_unit\nmust be defined."  as N_CAP_TYPE
N_CAP_TYPE -- DefaultResourceCapacity
N_CAP_TYPE -- TemporaryResourceCapacity
N_CAP_TYPE -- ActiveResourceCapacity

note "Start and/or End time must be defined." as N_TEMP_TIME
N_TEMP_TIME -- TemporaryResourceCapacity

ResourceDetails -- ResourceCapacity
ResourceDetails -- ResourceStatus
ResourceDetails -- ResourceDefinition
ResourceDetails -- ResourceReference

ActiveResourceCapacity -- CapacityLimitType
ActiveResourceCapacity -- DurationUnits
ActiveResourceCapacity -- Time
DefaultResourceCapacity -- CapacityLimitType
DefaultResourceCapacity -- DurationUnits
TemporaryResourceCapacity -- CapacityLimitType
TemporaryResourceCapacity -- DurationUnits
ResourceCapacity -- DefaultResourceCapacity
ResourceCapacity -- "0..*" TemporaryResourceCapacity
TemporaryResourceCapacity -- Time

ResourceDefinition -- ResourceType
ResourceDefinition -- LatLngPoint
ResourceDefinition -- ResourceShape
ResourceDefinition -- Circle
Circle -- Radius

ResourceStatus -- ResourceStatusType
ResourceStatus -- ActiveResourceCapacity


' ResourceInfoServiceBaseURL -|> UssBaseURL

' OperationalIntentReference:
'       required:
'       - id
'       - manager
'       - state
'       - subscription_id
'       - time_end
'       - time_start
'       - uss_availability
'       - uss_base_url
'       - version
'       type: object
'       properties:
'         id:
'           $ref: '#/components/schemas/EntityID'
'         manager:
'           type: string
'           description: Created by the DSS based on creating client's ID (via access token).  Used internal to the DSS for restricting mutation and deletion operations to manager.  Used by USSs to reject operational intent update notifications originating from a USS that does not manage the operational intent.
'           example: uss1
'         uss_availability:
'           $ref: '#/components/schemas/UssAvailabilityState'
'         version:
'           type: integer
'           description: "Numeric version of this operational intent which increments upon each change in the operational intent, regardless of whether any field of the operational intent reference changes.  A USS with the details of this operational intent when it was at a particular version does not need to retrieve the details again until the version changes."
'           format: int32
'           example: 1
'         state:
'           $ref: '#/components/schemas/OperationalIntentState'
'         ovn:
'           description: "Opaque version number of this operational intent.  Populated only when the OperationalIntentReference is managed by the USS retrieving or providing it.  Not populated when the OperationalIntentReference is not managed by the USS retrieving or providing it (instead, the USS must obtain the OVN from the details retrieved from the managing USS)."
'           anyOf:
'           - $ref: '#/components/schemas/EntityOVN'
'         time_start:
'           description: Beginning time of operational intent.
'           anyOf:
'           - $ref: '#/components/schemas/Time'
'         time_end:
'           description: End time of operational intent.
'           anyOf:
'           - $ref: '#/components/schemas/Time'
'         uss_base_url:
'           $ref: '#/components/schemas/OperationalIntentUssBaseURL'
'         subscription_id:
'           description: The ID of the subscription that is ensuring the operational intent manager receives relevant airspace updates.
'           anyOf:
'           - $ref: '#/components/schemas/SubscriptionID'
     

@enduml